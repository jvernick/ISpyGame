package com.picspy.views.Fragments;

import android.support.v4.content.AsyncTaskLoader;
import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.Loader;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.picspy.FriendsTableRequests;
import com.picspy.UsersTableRequests;
import com.picspy.adapters.FindFriendArrayAdapter;
import com.picspy.firstapp.R;
import com.picspy.models.UserRecord;
import com.picspy.utils.AppConstants;
import com.picspy.utils.PrefUtil;

/**
 * Created by Justin12 on 6/6/2015.
 */
public class FriendSearchFragment extends Fragment implements LoaderManager.LoaderCallbacks<UserRecord>{
    private static final String USERNAME = "username";
    private static final java.lang.String USER_ID = "userID";
    private FindFriendArrayAdapter  arrayAdapter;
    private static final int LOADER_ID = 0;
    private Button btnFindFriend;
    private EditText unameField;
    private TextView responseText;
    private ProgressBar progressSpinner;
    private static int friendStatus = -1;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        final View rootView = inflater.inflate(R.layout.fragment_friend_search, container, false);
        btnFindFriend = (Button) rootView.findViewById(R.id.btn_add_friend);
        unameField = (EditText) rootView.findViewById(R.id.username_field);
        unameField.requestFocus();
        InputMethodManager mgr = (InputMethodManager)
                getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
        mgr.showSoftInput(unameField, InputMethodManager.SHOW_IMPLICIT);
        responseText = (TextView) rootView.findViewById(R.id.message);

        progressSpinner = (ProgressBar) rootView.findViewById(R.id.progressBar);
        progressSpinner.setVisibility(View.GONE);
        return rootView;
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        final LoaderManager.LoaderCallbacks<UserRecord> callback = this;
        btnFindFriend.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (unameField.getText().length() != 0) {
                    responseText.requestFocus();
                    responseText.setText("");
                    InputMethodManager mgr = (InputMethodManager)
                            getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                    mgr.hideSoftInputFromWindow(unameField.getWindowToken(), 0);

                    Bundle data = new Bundle();
                    data.putString(FriendSearchFragment.USERNAME, unameField.getText().toString());
                    getLoaderManager().restartLoader(LOADER_ID, data, callback).forceLoad();
                }
            }
        });
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<UserRecord> onCreateLoader(int id, Bundle args) {
        progressSpinner.setVisibility(View.VISIBLE);
        return new FindFriendLoader(getActivity(), args.getString(USERNAME));
    }

    /**
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<UserRecord> loader, UserRecord data) {
        progressSpinner.setVisibility(View.GONE);

        if (data != null) {
            if (data.getId() == PrefUtil.getInt(getActivity(), AppConstants.USER_ID, -1)) {
                responseText.setText("Can't Add Yourself");
            } else if (friendStatus == 0){
                //TODO this is set when the user already sent you a request.
                responseText.setText("Already Friends");
            } else if (friendStatus == data.getId()) {
                responseText.setText(data.getUsername() + " sent you a request");
                unameField.setText("");
            } else {
                responseText.setText("Friend Request Sent");
                unameField.setText("");
            }
        } else {
            responseText.setText("User Doesn't Exist");
        }
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<UserRecord> loader) {

    }

    private static class FindFriendLoader extends AsyncTaskLoader<UserRecord> {
        private final String username;

        public FindFriendLoader(Context context, String username) {
            super(context);
            this.username = username;
        }


        //TODO optimize to send only one request
        @Override
        public UserRecord loadInBackground() {
            UserRecord result = (new UsersTableRequests(getContext())).findUser(username);
            if (result != null && result.getId() !=
                    PrefUtil.getInt(getContext(), AppConstants.USER_ID, -1)) {
                if ((new FriendsTableRequests(getContext())).sendFriendRequest(result.getId()).compareTo("SUCCESS") != 0){
                    friendStatus = (new FriendsTableRequests(getContext()))
                            .getStats(result.getId()).getStatus();
                }
            }
            return result;
        }
    }
}
